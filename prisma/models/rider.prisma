model Rider {
  id               String            @id @default(uuid())
  userId           String            @unique
  vehicleType      VehicleType
  vehiclePlate     String?
  licenseNumber    String?
  identityDocument String?
  isVerified       Boolean           @default(false)
  isAvailable      Boolean           @default(false)
  currentLatitude  Float?
  currentLongitude Float?
  rating           Float             @default(0)
  totalRatings     Int               @default(0)
  status           ApplicationStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deliveries       Delivery[]
  earnings         RiderEarning[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders           Order[]
  payments         Payment[]

  @@map("riders")
}

model RiderEarning {
  id          String        @id @default(uuid())
  riderId     String
  amount      Float
  status      PaymentStatus @default(PENDING)
  description String?
  deliveryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  delivery    Delivery?     @relation(fields: [deliveryId], references: [id])
  rider       Rider         @relation(fields: [riderId], references: [id], onDelete: Cascade)

  @@map("rider_earnings")
}

model RiderApplication {
  id               String            @id @default(uuid())
  userId           String            @unique
  vehicleType      VehicleType
  vehiclePlate     String?
  licenseNumber    String
  identityDocument String
  status           ApplicationStatus @default(PENDING)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  User             User[]

  @@map("rider_applications")
}

enum VehicleType {
  BICYCLE
  MOTORCYCLE
  CAR
  VAN
  TRUCK
}

model Delivery {
  id                    String         @id @default(uuid())
  orderId               String         @unique
  riderId               String?
  status                DeliveryStatus @default(PENDING)
  pickupAddress         String
  deliveryAddress       String
  pickupTime            DateTime? // When the rider picked up the order
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime? // When the order was delivered
  trackingNumber        String         @unique
  notes                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  order                 Order          @relation(fields: [orderId], references: [id])
  rider                 Rider?         @relation(fields: [riderId], references: [id])
  riderEarnings         RiderEarning[]
  User                  User?          @relation(fields: [userId], references: [id])
  userId                String?

  @@map("deliveries")
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}
