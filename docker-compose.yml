services:
  backend:
    container_name: ecommerce-backend
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    image: ecommerce-backend:latest
    ports:
      - '4000:4000'
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    restart: unless-stopped
    networks:
      - backend_network
      - frontend_network
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app # Sync code
      - /app/node_modules # Prevent overwriting node_modules inside container
    command: ['/bin/sh', '-c', 'npx prisma generate && npx prisma migrate deploy && npm run start:dev']
  postgres:
    container_name: ecommerce-postgres
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret2580
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend_network

  prisma-studio:
    container_name: prisma-studio
    image: ecommerce-backend:latest
    ports:
      - '5555:5555'
    depends_on:
      - backend
      - postgres
    environment:
      DATABASE_URL: ${DATABASE_URL}
    working_dir: /app
    volumes:
      - .:/app
    command: >
      sh -c "npx prisma generate && npx prisma studio --port 5555"
    networks:
      - backend_network

  prisma-seed:
    container_name: prisma-seed
    image: ecommerce-backend:latest
    depends_on:
      - backend
      - postgres
    environment:
      DATABASE_URL: ${DATABASE_URL}
    working_dir: /app
    volumes:
      - .:/app
    command: >
      sh -c "npx prisma generate && npx prisma db seed"
    networks:
      - backend_network

  redis:
    container_name: ecommerce-redis
    image: redis:alpine
    restart: unless-stopped
    networks:
      - backend_network
    ports:
      - '6379:6379'

volumes:
  postgres_data:

networks:
  frontend_network:
  backend_network:
